package com.sreekar.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class Stock {
public static void main(String[] args) {
	String Url="https://chartink.com/screener/process";
	RestTemplate rest=new RestTemplate();
	
	Map<String, Object> myMap=new HashMap<String, Object>();
	    myMap.put("scan_clause", "( {33489} ( ( {33489} ( ( {33489} ( latest close > 200 and latest close < 1000 and latest close > latest open and latest close > 1 day ago close and( {33489} ( ( {33489} ( [0] 5 minute macd line( 26,12,9 ) > 0 and [ -1 ] 5 minute macd line( 26,12,9 ) <= 0 or [0] 5 minute macd line( 26,12,9 ) > 0 ) ) and( {33489} ( [0] 5 minute macd line( 26,12,9 ) > [0] 5 minute macd signal( 26,12,9 ) and [ -1 ] 5 minute macd line( 26,12,9 ) <= [ -1 ] 5 minute macd signal( 26,12,9 ) or [0] 5 minute macd line( 26,12,9 ) > [0] 5 minute macd signal( 26,12,9 ) ) ) and( {33489} ( [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx di negative( 14 ) and [ -1 ] 5 minute adx di positive( 14 ) <= [ -1 ] 5 minute adx di negative( 14 ) or [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx di negative( 14 ) ) ) and( {33489} ( [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx( 14 ) ) ) and( {33489} ( [0] 5 minute adx( 14 ) > [0] 5 minute adx di negative( 14 ) and [ -1 ] 5 minute adx( 14 ) <= [ -1 ] 5 minute adx di negative( 14 ) or [0] 5 minute adx( 14 ) > [0] 5 minute adx di negative( 14 ) ) ) and( {33489} ( [0] 5 minute rsi( 14 ) > 60 and [ -1 ] 5 minute rsi( 14 ) <= 60 or [0] 5 minute rsi( 14 ) > 60 ) ) and( {33489} ( [0] 5 minute close > [0] 5 minute supertrend( 10 , 2 ) or [0] 5 minute close > [0] 5 minute supertrend( 10 , 2 ) and [ -1 ] 5 minute close <= [ -1 ] 5 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute close > [0] 15 minute supertrend( 10 , 2 ) or [0] 15 minute close > [0] 15 minute supertrend( 10 , 2 ) and [ -1 ] 15 minute close <= [ -1 ] 15 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute adx di positive( 14 ) > [0] 15 minute adx( 14 ) and [ -1 ] 15 minute adx di positive( 14 ) <= [ -1 ] 15 minute adx( 14 ) or [0] 15 minute adx di positive( 14 ) > [0] 15 minute adx( 14 ) ) ) and( {33489} ( [0] 15 minute adx( 14 ) > [0] 15 minute adx di negative( 14 ) and [ -1 ] 15 minute adx( 14 ) <= [ -1 ] 15 minute adx di negative( 14 ) or [0] 15 minute adx( 14 ) > [0] 15 minute adx di negative( 14 ) ) ) and( {33489} ( 1 day ago low = 1 day ago min( 20 , latest low ) or 2 days ago low = 2 days ago min( 20 , latest low ) or 3 days ago low = 3 days ago min( 20 , latest low ) or 4 days ago low = 4 days ago min( 20 , latest low ) or 5 days ago low = 5 days ago min( 20 , latest low ) ) ) ) ) ) ) ) ) or( {33489} ( ( {33489} ( latest close > 200 and latest close < 1000 and latest close < latest open and latest close < 1 day ago close and( {33489} ( ( {33489} ( [0] 5 minute macd line( 26,12,9 ) < 0 and [ -1 ] 5 minute macd line( 26,12,9 ) >= 0 or [0] 5 minute macd line( 26,12,9 ) < 0 ) ) and( {33489} ( [0] 5 minute macd line( 26,12,9 ) < [0] 5 minute macd signal( 26,12,9 ) and [ -1 ] 5 minute macd line( 26,12,9 ) >= [ -1 ] 5 minute macd signal( 26,12,9 ) or [0] 5 minute macd line( 26,12,9 ) < [0] 5 minute macd signal( 26,12,9 ) ) ) and( {33489} ( [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx di positive( 14 ) and [ -1 ] 5 minute adx di negative( 14 ) <= [ -1 ] 5 minute adx di positive( 14 ) or [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx di positive( 14 ) ) ) and( {33489} ( [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx( 14 ) ) ) and( {33489} ( [0] 5 minute adx( 14 ) > [0] 5 minute adx di positive( 14 ) and [ -1 ] 5 minute adx( 14 ) <= [ -1 ] 5 minute adx di positive( 14 ) or [0] 5 minute adx( 14 ) > [0] 5 minute adx di positive( 14 ) ) ) and( {33489} ( [0] 5 minute rsi( 14 ) < 40 or [0] 5 minute rsi( 14 ) < 40 and [ -1 ] 5 minute rsi( 14 ) >= 40 ) ) and( {33489} ( [0] 5 minute close < [0] 5 minute supertrend( 10 , 2 ) or [0] 5 minute close < [0] 5 minute supertrend( 10 , 2 ) and [ -1 ] 5 minute close >= [ -1 ] 5 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute close < [0] 15 minute supertrend( 10 , 2 ) or [0] 15 minute close < [0] 15 minute supertrend( 10 , 2 ) and [ -1 ] 15 minute close >= [ -1 ] 15 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute adx di negative( 14 ) > [0] 15 minute adx( 14 ) or [0] 15 minute adx di negative( 14 ) > [0] 15 minute adx( 14 ) and [ -1 ] 15 minute adx di negative( 14 ) <= [ -1 ] 15 minute adx( 14 ) ) ) and( {33489} ( [0] 15 minute adx( 14 ) > [0] 15 minute adx di positive( 14 ) or [0] 15 minute adx( 14 ) > [0] 15 minute adx di positive( 14 ) and [ -1 ] 15 minute adx( 14 ) <= [ -1 ] 15 minute adx di positive( 14 ) ) ) and( {33489} ( 1 day ago high = 1 day ago max( 20 , latest high ) or 2 days ago high = 2 days ago max( 20 , latest high ) or 3 days ago high = 3 days ago max( 20 , latest high ) or 4 days ago high = 4 days ago max( 20 , latest high ) or 5 days ago high = 5 days ago max( 20 , latest high ) ) ) ) ) ) ) ) ) ) ) ");
	    HttpHeaders headers = new HttpHeaders();
	    
	   // headers.add("remember_web_59ba36addc2b2f9401580f014c7f58ea4e30989d", "eyJpdiI6ImVLV0dRZG1WSVB0M3NtQ0hDcEcxYVE9PSIsInZhbHVlIjoiUWNxbWVKa2JycVRKZUxadDRMc2lSbFRDQ09oazQ1R3EyQkpJYm8yUmVpZzJYQ0pYSnRwR1wvT3FyY1diK3A5ejh6Znc1NFo0Z2s2TXQweVk1ell3aHZJOU8za3phVFpoSjdKK253SmJjangrXC9ibXFlRHpTTjhyZVVZNlZYMkFDTU9WYzIwRWVpUzZUUXhTVzRcLzFUbzk1eWp2ck96V2o5Um9JbjZ5V21SN0M0PSIsIm1hYyI6IjUwMjAyYTVlNDYwNzUzNzQ1YmE2MjM3M2RiOTQxZjRjYzZmOTQ1ZDQ0NzI2NTgwZDlmZGJjYjIxNjFlYjFjYmQifQ");
	    //headers.add("ci_session", "eyJpdiI6ImFVdnduYThjMTF1ODY4cGNSRFNGeGc9PSIsInZhbHVlIjoieHp5akl3a201V3FTcTFJWDZkTFVwZ044ajlDZnBmZ3BSWG53TzJIRlExSHVHdGp1NmZNYnFlVmRZMTlTTkdsYSIsIm1hYyI6IjgzZDMwN2VhNTAwNzUwYmVlNzQ3NjIxMWRhMTFiYjMzOWYyNmI5ZWFmMDcyMDdmNzRhODU1Y2NjZjE0NmExNTQifQ");
	    headers.add("Cookie","X-CSRF-Token=eyJpdiI6Ik15V2h2c2NxMWI3VnYwd2NhVm8zenc9PSIsInZhbHVlIjoiTFlFdllDcTlCUHd1TkorZVJHK1RSWUZ4UVUzd0JoR0d2NXRBajdVeWFpV1hQb24wUnozMk9xVVwvY3NxYk5maUYiLCJtYWMiOiIyMGU1YzI3YTlhYzUzMDEyODgxNzlkYTcwNGY3NzJkMTg5ZTQ1M2ZhZTIyNjY5MjA1YzUzOTk4MTU4YTI1Njc0In0");
	    HttpEntity<?> request = new HttpEntity<>(myMap, headers);
	ResponseEntity<Object> response=rest.postForEntity(Url, request, Object.class);
	System.out.println(response.getBody());
}

}
