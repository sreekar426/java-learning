package com.mindtree.java.controller;

import java.time.Year;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;

import com.mindtree.entity.DescriptionEntity;
import com.mindtree.entity.PropertyEntity;
import com.mindtree.entity.RequestDto;
import com.mindtree.entity.ZoneTypeEntity;

@Controller
public class TaxMangmentController {

	/**
	 * Adds the tax.
	 *
	 * @param map the map
	 * @return the string
	 * 
	 * 
	 */
	@GetMapping("/addTax")
	public String addTax(ModelMap map) {
		return "addTax";
	}

	/**
	 * View tax.
	 *
	 * @param map the map
	 * @return the string
	 */
	@GetMapping("/viewTax")
	public String viewTax(ModelMap map) {
		return "viewTax";
	}
	
	
	@GetMapping("/view")
	@ResponseBody
	public List<ZoneTypeEntity> viewRecords() {

		return zoneRepository.findAll();

	}
	
	@GetMapping("/all")
	@ResponseBody
	public List<String> getAllZone() {
		List<String> zonesList = new ArrayList<>();

		List<ZoneTypeEntity> listOfZone = zoneRepository.findAll();

		listOfZone.forEach(o -> {
			zonesList.add(o.getZoneType());
		});

		return zonesList;

	}

	@GetMapping("/all/{zoneId}")
	@ResponseBody
	public List<String> getDescriptionById(@PathVariable String zoneId) {

		List<String> descriptionDetails = new ArrayList<>();

		ZoneTypeEntity zoneDetails;

		zoneDetails = zoneRepository.findByZoneType(zoneId);

		zoneDetails.getDescriptionTypeEntities().forEach(o -> {

			descriptionDetails.add(o.getDescType());
		});

		return descriptionDetails;

	}

	@PostMapping("/taxValue")
	@ResponseBody
	public double taxCalculation(@RequestBody RequestDto requestDto) {

		ZoneTypeEntity zoneType = zoneRepository.findByZoneType(requestDto.getZoneId());
		DescriptionEntity descType = descriptionRepository.findByDescTypeAndZoneZoneId(requestDto.getPropertyId(),
				zoneType.getZoneId());

		PropertyEntity property = propertyRepository.findByDescriptionTypeEntityDescIdAndStatus(descType.getDescId(),
				requestDto.getStatus());

		double t5;
		double area = Math.round(requestDto.getAreaId() * 100.0) / 100.0;
		double uav = property.getUav();
		double t1 = (float) (area * uav * 10);
		int year = Year.now().getValue();
		int depriciationValue = year - Integer.parseInt(requestDto.getYearId());

		if (depriciationValue < 60) {
			double t2 = t1 - (depriciationValue * t1) / 100;
			double t3 = t2 + (t2 * 20) / 100;
			double t4 = t3 + (t3 * 24) / 100;
			t5 = t3 + t4;
		} else {
			double t2 = t1 - (60 * t1) / 100;
			double t3 = t2 + (t2 * 20) / 100;
			double t4 = t3 + (t3 * 24) / 100;
			t5 = t3 + t4;
		}

		return Math.round(t5 * 100.0) / 100.0;

	}

	@PostMapping("/pay")
	@ResponseBody
	public String pay(@RequestBody RequestDto requestDto) {

		ZoneTypeEntity zoneId = zoneRepository.findByZoneType(requestDto.getZoneId());

		if ("Owner".equalsIgnoreCase(requestDto.getStatus())) {

			zoneId.setOwnerAmount(zoneId.getOwnerAmount() + Math.round(requestDto.getTotalId() * 100.0) / 100.0);
			zoneRepository.save(zoneId);

		} else {
			zoneId.setTenantAmount(zoneId.getTenantAmount() + Math.round(requestDto.getTotalId() * 100.0) / 100.0);
			zoneRepository.save(zoneId);
		}

		return "Tax details are saved successfully";

	}
	
	
}