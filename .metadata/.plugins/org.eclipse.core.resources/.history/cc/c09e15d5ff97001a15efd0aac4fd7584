package com.sreekar.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

public class Stock {
public static void main(String[] args) {
	String Url="https://chartink.com/screener/process";
	RestTemplate rest=new RestTemplate();
	
	Map<String, Object> myMap=new HashMap<String, Object>();
	    myMap.put("scan_clause", "( {33489} ( ( {33489} ( ( {33489} ( latest close > 200 and latest close < 1000 and latest close > latest open and latest close > 1 day ago close and( {33489} ( ( {33489} ( [0] 5 minute macd line( 26,12,9 ) > 0 and [ -1 ] 5 minute macd line( 26,12,9 ) <= 0 or [0] 5 minute macd line( 26,12,9 ) > 0 ) ) and( {33489} ( [0] 5 minute macd line( 26,12,9 ) > [0] 5 minute macd signal( 26,12,9 ) and [ -1 ] 5 minute macd line( 26,12,9 ) <= [ -1 ] 5 minute macd signal( 26,12,9 ) or [0] 5 minute macd line( 26,12,9 ) > [0] 5 minute macd signal( 26,12,9 ) ) ) and( {33489} ( [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx di negative( 14 ) and [ -1 ] 5 minute adx di positive( 14 ) <= [ -1 ] 5 minute adx di negative( 14 ) or [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx di negative( 14 ) ) ) and( {33489} ( [0] 5 minute adx di positive( 14 ) > [0] 5 minute adx( 14 ) ) ) and( {33489} ( [0] 5 minute adx( 14 ) > [0] 5 minute adx di negative( 14 ) and [ -1 ] 5 minute adx( 14 ) <= [ -1 ] 5 minute adx di negative( 14 ) or [0] 5 minute adx( 14 ) > [0] 5 minute adx di negative( 14 ) ) ) and( {33489} ( [0] 5 minute rsi( 14 ) > 60 and [ -1 ] 5 minute rsi( 14 ) <= 60 or [0] 5 minute rsi( 14 ) > 60 ) ) and( {33489} ( [0] 5 minute close > [0] 5 minute supertrend( 10 , 2 ) or [0] 5 minute close > [0] 5 minute supertrend( 10 , 2 ) and [ -1 ] 5 minute close <= [ -1 ] 5 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute close > [0] 15 minute supertrend( 10 , 2 ) or [0] 15 minute close > [0] 15 minute supertrend( 10 , 2 ) and [ -1 ] 15 minute close <= [ -1 ] 15 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute adx di positive( 14 ) > [0] 15 minute adx( 14 ) and [ -1 ] 15 minute adx di positive( 14 ) <= [ -1 ] 15 minute adx( 14 ) or [0] 15 minute adx di positive( 14 ) > [0] 15 minute adx( 14 ) ) ) and( {33489} ( [0] 15 minute adx( 14 ) > [0] 15 minute adx di negative( 14 ) and [ -1 ] 15 minute adx( 14 ) <= [ -1 ] 15 minute adx di negative( 14 ) or [0] 15 minute adx( 14 ) > [0] 15 minute adx di negative( 14 ) ) ) and( {33489} ( 1 day ago low = 1 day ago min( 20 , latest low ) or 2 days ago low = 2 days ago min( 20 , latest low ) or 3 days ago low = 3 days ago min( 20 , latest low ) or 4 days ago low = 4 days ago min( 20 , latest low ) or 5 days ago low = 5 days ago min( 20 , latest low ) ) ) ) ) ) ) ) ) or( {33489} ( ( {33489} ( latest close > 200 and latest close < 1000 and latest close < latest open and latest close < 1 day ago close and( {33489} ( ( {33489} ( [0] 5 minute macd line( 26,12,9 ) < 0 and [ -1 ] 5 minute macd line( 26,12,9 ) >= 0 or [0] 5 minute macd line( 26,12,9 ) < 0 ) ) and( {33489} ( [0] 5 minute macd line( 26,12,9 ) < [0] 5 minute macd signal( 26,12,9 ) and [ -1 ] 5 minute macd line( 26,12,9 ) >= [ -1 ] 5 minute macd signal( 26,12,9 ) or [0] 5 minute macd line( 26,12,9 ) < [0] 5 minute macd signal( 26,12,9 ) ) ) and( {33489} ( [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx di positive( 14 ) and [ -1 ] 5 minute adx di negative( 14 ) <= [ -1 ] 5 minute adx di positive( 14 ) or [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx di positive( 14 ) ) ) and( {33489} ( [0] 5 minute adx di negative( 14 ) > [0] 5 minute adx( 14 ) ) ) and( {33489} ( [0] 5 minute adx( 14 ) > [0] 5 minute adx di positive( 14 ) and [ -1 ] 5 minute adx( 14 ) <= [ -1 ] 5 minute adx di positive( 14 ) or [0] 5 minute adx( 14 ) > [0] 5 minute adx di positive( 14 ) ) ) and( {33489} ( [0] 5 minute rsi( 14 ) < 40 or [0] 5 minute rsi( 14 ) < 40 and [ -1 ] 5 minute rsi( 14 ) >= 40 ) ) and( {33489} ( [0] 5 minute close < [0] 5 minute supertrend( 10 , 2 ) or [0] 5 minute close < [0] 5 minute supertrend( 10 , 2 ) and [ -1 ] 5 minute close >= [ -1 ] 5 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute close < [0] 15 minute supertrend( 10 , 2 ) or [0] 15 minute close < [0] 15 minute supertrend( 10 , 2 ) and [ -1 ] 15 minute close >= [ -1 ] 15 minute supertrend( 10 , 2 ) ) ) and( {33489} ( [0] 15 minute adx di negative( 14 ) > [0] 15 minute adx( 14 ) or [0] 15 minute adx di negative( 14 ) > [0] 15 minute adx( 14 ) and [ -1 ] 15 minute adx di negative( 14 ) <= [ -1 ] 15 minute adx( 14 ) ) ) and( {33489} ( [0] 15 minute adx( 14 ) > [0] 15 minute adx di positive( 14 ) or [0] 15 minute adx( 14 ) > [0] 15 minute adx di positive( 14 ) and [ -1 ] 15 minute adx( 14 ) <= [ -1 ] 15 minute adx di positive( 14 ) ) ) and( {33489} ( 1 day ago high = 1 day ago max( 20 , latest high ) or 2 days ago high = 2 days ago max( 20 , latest high ) or 3 days ago high = 3 days ago max( 20 , latest high ) or 4 days ago high = 4 days ago max( 20 , latest high ) or 5 days ago high = 5 days ago max( 20 , latest high ) ) ) ) ) ) ) ) ) ) ) ");
	    HttpHeaders headers = new HttpHeaders();
	  //  headers.add("Set-Cookie", "SRF-TOKEN=eyJpdiI6IkliOVVLR1NOTTdmV2NGQTR1ZWpTanc9PSIsInZhbHVlIjoid1RoV05YeGRPTXlqOWlJdTFpVmdkYTlCRHpoREl5RFI2YkF1ek1JbWFhMklKK0k3SVZOd1VXeE4zUStLV25GdCIsIm1hYyI6IjUyZDc2YTYzNzM4NGU3OWU2YmRmNmQyNTIwYTVjMTQwMjRmM2FjMjE4MzZiOWZjMjVlM2U0NWQzMDA5MjI1OTgifQ%3D%3D");
	    headers.set("X-CSRF-TOKEN", "eyJpdiI6IjlRem5XeUNsSGo1bmFMMEFrU3UwK1E9PSIsInZhbHVlIjoibnpheXdKNFwvYWZ3U0Y0RnhReGxmOWdkQzZZOWc1ZDhMTjRacGVvTmRZQ2RtVDRnVTRiY25GeVVNRlNoWndZbFIiLCJtYWMiOiI2NDE2YTg5NzI2NjAwZjg5NmRmMTY5NTEzM2M2ZDgzYTk0YTM3YzhjYjkyYzFjNDE5Mjg0YTQyZTk1NTliYjg3In0");
	    headers.set("csrf-token","eyJpdiI6Ik93b0FIdTRoZEZIWWQzMFB4S09vd2c9PSIsInZhbHVlIjoicjcrcnQ4YUcxMUxzM3RJd2NEa1F5bzRLQjM3Qk9aTjFpYXUwTjdCbEtTS0V0QldvTWZockhsQzk2RUwwS1FyQSIsIm1hYyI6IjY3ZWEyZmE4YjIyNDU1YmM2YTg4YTZmMDc2Zjg4YzBjN2E4OGM5MTRhYjI2NTM0MmQwZDlhMTdiOGZlNWVlYmMifQ");	
	    HttpEntity<?> request = new HttpEntity<>(myMap, headers);
	ResponseEntity<Object> response=rest.postForEntity(Url, request, Object.class);
	System.out.println(response.getBody());
}

}
